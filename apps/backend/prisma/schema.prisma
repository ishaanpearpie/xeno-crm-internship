generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  googleId  String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  campaigns Campaign[]
  segments  Segment[]
}

model Customer {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String
  phone       String?
  totalSpend  Decimal   @default(0) @db.Decimal(10, 2)
  totalVisits Int       @default(0)
  lastVisit   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orders              Order[]
  communicationLogs   CommunicationLog[]

  @@index([totalSpend])
  @@index([totalVisits])
  @@index([lastVisit])
}

model Order {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  amount     Decimal   @db.Decimal(10, 2)
  status     String
  orderDate  DateTime
  createdAt  DateTime @default(now())

  @@index([customerId])
  @@index([orderDate])
}

model Segment {
  id           String   @id @default(uuid())
  name         String
  description  String?
  rules        Json
  audienceSize Int      @default(0)
  createdBy    User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  campaigns Campaign[]
}

enum CampaignStatus {
  draft
  scheduled
  running
  completed
  failed
}

model Campaign {
  id          String          @id @default(uuid())
  name        String
  message     String
  segment     Segment         @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId   String
  createdBy   User            @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  status      CampaignStatus  @default(draft)
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime        @default(now())

  communicationLogs CommunicationLog[]
  aiContents       AIContent[]

  @@index([segmentId])
  @@index([createdById])
}

enum DeliveryStatus {
  pending
  sent
  delivered
  failed
}

model CommunicationLog {
  id               String         @id @default(uuid())
  campaign         Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId       String
  customer         Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String
  message          String
  status           DeliveryStatus @default(pending)
  vendorReference  String?
  sentAt           DateTime?
  deliveredAt      DateTime?
  failureReason    String?
  createdAt        DateTime       @default(now())

  @@index([campaignId])
  @@index([customerId])
}

enum AIContentType {
  message_suggestion
  image_suggestion
  insight
}

model AIContent {
  id          String       @id @default(uuid())
  campaign    Campaign     @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String
  contentType AIContentType
  content     Json
  prompt      String?
  createdAt   DateTime     @default(now())

  @@index([campaignId])
}


